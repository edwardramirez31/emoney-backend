service: emoney
frameworkVersion: '>=2.35.0'

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dynamodb-stream-arn-plugin

provider:
  stage: ${opt:stage, "dev"}
  name: aws
  runtime: nodejs14.x
  timeout: 30
  lambdaHashingVersion: '20201221'
  region: us-east-1
  memorySize: 128
  environment:
    DYNAMODB_ACCOUNTS_TABLE: 'Account'
    DYNAMODB_CATEGORY_TABLE: 'Category'
    DYNAMODB_GOAL_TABLE: 'Goal'
    DYNAMODB_TRANSACTION_TABLE: 'Transaction'
    DYNAMODB_TRANSFER_TABLE: 'Transfer'
    USER_POOL_ID: !Ref UserPool
    USER_POOL_CLIENT_ID: !Ref UserClient
    AUTH_FLOW: 'ADMIN_NO_SRP_AUTH'
    TARGET_S3_BUCKET: products-backup-${opt:stage, self:provider.stage, "dev"}
  httpApi:
    cors:
      allowedOrigins:
        - ${ssm:EMONEY_LOCALHOST}
        - ${ssm:EMONEY_FRONTEND_URL}
      allowedHeaders:
        - Content-Type
        - Authorization
      allowCredentials: true
      maxAge: 6000

    authorizers:
      jwtAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !Sub https://cognito-idp.${self:provider.region}.amazonaws.com/${UserPool}
        audience:
          - !Ref UserClient

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminRespondToAuthChallenge
          Resource: '*'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_ACCOUNTS_TABLE}'
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_CATEGORY_TABLE}'
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_GOAL_TABLE}'
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TRANSACTION_TABLE}'
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TRANSFER_TABLE}'

functions:
  login:
    handler: src/handlers/auth/login.handler
    events:
      - httpApi:
          path: /auth/login
          method: post

  signUp:
    handler: src/handlers/auth/signUp.handler
    events:
      - httpApi:
          path: /auth/signup
          method: post

  refreshToken:
    handler: src/handlers/auth/refreshToken.handler
    events:
      - httpApi:
          path: /auth/refresh
          method: post

  forgotPassword:
    handler: src/handlers/auth/forgotPassword.handler
    events:
      - httpApi:
          path: /auth/forgot-password
          method: post

  confirmForgotPassword:
    handler: src/handlers/auth/confirmForgotPassword.handler
    events:
      - httpApi:
          path: /auth/confirm-forgot-password
          method: post

  logout:
    handler: src/handlers/auth/logout.handler
    events:
      - httpApi:
          path: /auth/logout
          method: post
          authorizer:
            name: jwtAuthorizer

  associateMFA:
    handler: src/handlers/user/associateMFA.handler
    events:
      - httpApi:
          path: /user/associate-mfa
          method: post
          authorizer:
            name: jwtAuthorizer

  validateMFA:
    handler: src/handlers/user/validateMFA.handler
    events:
      - httpApi:
          path: /user/validate-mfa
          method: post
          authorizer:
            name: jwtAuthorizer

  changePassword:
    handler: src/handlers/user/changePassword.handler
    events:
      - httpApi:
          path: /user/change-password
          method: post
          authorizer:
            name: jwtAuthorizer

  updateProfile:
    handler: src/handlers/user/updateProfile.handler
    events:
      - httpApi:
          path: /user/profile
          method: put
          authorizer:
            name: jwtAuthorizer

  getProfile:
    handler: src/handlers/user/getProfile.handler
    events:
      - httpApi:
          path: /user/profile
          method: get
          authorizer:
            name: jwtAuthorizer

  confirmUserSignUp:
    handler: src/handlers/auth/confirmUserSignUp.handler
    events:
      - httpApi:
          path: /auth/confirm-signup
          method: post

  resendConfirmationCode:
    handler: src/handlers/auth/resendConfirmationCode.handler
    events:
      - httpApi:
          path: /auth/resend-code
          method: post

  respondToAuthChallenge:
    handler: src/handlers/auth/respondToAuthChallenge.handler
    events:
      - httpApi:
          path: /auth/auth-challenge
          method: post

  get-account-by-id:
    handler: src/handlers/account/index.getAccountHandler
    events:
      - httpApi:
          path: /account/{id}
          method: get
          authorizer:
            name: jwtAuthorizer

  get-accounts:
    handler: src/handlers/account/index.getAccountsHandler
    events:
      - httpApi:
          path: /account
          method: get
          authorizer:
            name: jwtAuthorizer

  create-account:
    handler: src/handlers/account/index.createAccountHandler
    events:
      - httpApi:
          path: /account
          method: post
          authorizer:
            name: jwtAuthorizer

  update-account:
    handler: src/handlers/account/index.updateAccountHandler
    events:
      - httpApi:
          path: /account/{id}
          method: put
          authorizer:
            name: jwtAuthorizer

  delete-account:
    handler: src/handlers/account/index.deleteAccountHandler
    events:
      - httpApi:
          path: /account/{id}
          method: delete
          authorizer:
            name: jwtAuthorizer

  get-transfer-by-id:
    handler: src/handlers/transfer/index.getTransferHandler
    events:
      - httpApi:
          path: /transfer/{id}
          method: get
          authorizer:
            name: jwtAuthorizer

  get-transfers:
    handler: src/handlers/transfer/index.getTransfersHandler
    events:
      - httpApi:
          path: /transfer
          method: get
          authorizer:
            name: jwtAuthorizer

  create-transfer:
    handler: src/handlers/transfer/index.createTransferHandler
    events:
      - httpApi:
          path: /transfer
          method: post
          authorizer:
            name: jwtAuthorizer

  update-transfer:
    handler: src/handlers/transfer/index.updateTransferHandler
    events:
      - httpApi:
          path: /transfer/{id}
          method: put
          authorizer:
            name: jwtAuthorizer

  delete-transfer:
    handler: src/handlers/transfer/index.deleteTransferHandler
    events:
      - httpApi:
          path: /transfer/{id}
          method: delete
          authorizer:
            name: jwtAuthorizer

  get-transaction-by-id:
    handler: src/handlers/transaction/index.getTransactionHandler
    events:
      - httpApi:
          path: /transaction/{id}
          method: get
          authorizer:
            name: jwtAuthorizer

  get-transactions:
    handler: src/handlers/transaction/index.getTransactionsHandler
    events:
      - httpApi:
          path: /transaction
          method: get
          authorizer:
            name: jwtAuthorizer

  create-transaction:
    handler: src/handlers/transaction/index.createTransactionHandler
    events:
      - httpApi:
          path: /transaction
          method: post
          authorizer:
            name: jwtAuthorizer

  update-transaction:
    handler: src/handlers/transaction/index.updateTransactionHandler
    events:
      - httpApi:
          path: /transaction/{id}
          method: put
          authorizer:
            name: jwtAuthorizer

  delete-transaction:
    handler: src/handlers/transaction/index.deleteTransactionHandler
    events:
      - httpApi:
          path: /transaction/{id}
          method: delete
          authorizer:
            name: jwtAuthorizer

  get-goal-by-id:
    handler: src/handlers/goal/index.getSavingGoalHandler
    events:
      - httpApi:
          path: /goal/{id}
          method: get
          authorizer:
            name: jwtAuthorizer

  get-goals:
    handler: src/handlers/goal/index.getSavingsGoalHandler
    events:
      - httpApi:
          path: /goal
          method: get
          authorizer:
            name: jwtAuthorizer

  create-goal:
    handler: src/handlers/goal/index.createSavingGoalHandler
    events:
      - httpApi:
          path: /goal
          method: post
          authorizer:
            name: jwtAuthorizer

  update-goal:
    handler: src/handlers/goal/index.updateSavingGoalHandler
    events:
      - httpApi:
          path: /goal/{id}
          method: put
          authorizer:
            name: jwtAuthorizer

  delete-goal:
    handler: src/handlers/goal/index.deleteSavingGoalHandler
    events:
      - httpApi:
          path: /goal/{id}
          method: delete
          authorizer:
            name: jwtAuthorizer

  get-category-by-id:
    handler: src/handlers/category/index.getCategoryHandler
    events:
      - httpApi:
          path: /category/{id}
          method: get
          authorizer:
            name: jwtAuthorizer

  get-categories:
    handler: src/handlers/category/index.getCategoriesHandler
    events:
      - httpApi:
          path: /category
          method: get
          authorizer:
            name: jwtAuthorizer

  create-category:
    handler: src/handlers/category/index.createCategoryHandler
    events:
      - httpApi:
          path: /category
          method: post
          authorizer:
            name: jwtAuthorizer

  update-category:
    handler: src/handlers/category/index.updateCategoryHandler
    events:
      - httpApi:
          path: /category/{id}
          method: put
          authorizer:
            name: jwtAuthorizer

  delete-category:
    handler: src/handlers/category/index.deleteCategoryHandler
    events:
      - httpApi:
          path: /category/{id}
          method: delete
          authorizer:
            name: jwtAuthorizer

  transactionsDynamoStream:
    handler: src/handlers/streams/transactions.handler
    name: ${self:service}-transactions-${opt:stage, self:provider.stage, "dev"}-stream
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TransactionTable.StreamArn
          batchSize: 1
          startingPosition: LATEST
          enabled: true

  transfersDynamoStream:
    handler: src/handlers/streams/transfers.handler
    name: ${self:service}-transfers-${opt:stage, self:provider.stage, "dev"}-stream
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TransferTable.StreamArn
          batchSize: 1
          startingPosition: LATEST
          enabled: true

resources:
  - ${file(./sls/${self:provider.stage}/resources/main.yml)}

custom:
  webpack:
    packager: 'yarn'
    keepOutputDirectory: true
    webpackConfig: 'webpack.config.js'
