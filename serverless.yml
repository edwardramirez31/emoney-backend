service: emoney
frameworkVersion: '>=2.35.0'

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dynamodb-stream-arn-plugin

provider:
  stage: dev
  name: aws
  runtime: nodejs14.x
  timeout: 30
  lambdaHashingVersion: '20201221'
  region: us-east-1
  environment:
    DYNAMODB_ACCOUNTS_TABLE: 'Account'
    DYNAMODB_CATEGORY_TABLE: 'Category'
    DYNAMODB_GOAL_TABLE: 'Goal'
    DYNAMODB_TRANSACTION_TABLE: 'Transaction'
    DYNAMODB_TRANSFER_TABLE: 'Transfer'
    USER_POOL_ID: !Ref UserPool
    USER_POOL_CLIENT_ID: !Ref UserClient
    AUTH_FLOW: 'ADMIN_NO_SRP_AUTH'
    TARGET_S3_BUCKET: products-backup-${opt:stage, self:provider.stage, "dev"}
  # apiGateway:
  #   restApiId:
  #     Ref: MyApiGW
  #   restApiRootResourceId:
  #     Fn::GetAtt:
  #       - MyApiGW
  #       - RootResourceId
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminRespondToAuthChallenge
          Resource: '*'
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:ListBucket'
          Resource:
            - 'arn:aws:s3:::products-backup-dev/*'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_ACCOUNTS_TABLE}'
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_CATEGORY_TABLE}'
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_GOAL_TABLE}'
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TRANSACTION_TABLE}'
            - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TRANSFER_TABLE}'

functions:
  login:
    handler: src/handlers/auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors:
            origins:
              - http://localhost:3002

  signUp:
    handler: src/handlers/auth/signUp.handler
    events:
      - http:
          path: auth/signup
          method: post
          cors:
            origins:
              - http://localhost:3002

  refreshToken:
    handler: src/handlers/auth/refreshToken.handler
    events:
      - http:
          path: auth/refresh
          method: post
          cors:
            origins:
              - http://localhost:3002

  # forgotPassword:
  #   handler: src/handlers/auth/forgotPassword.handler
  #   events:
  #     - http:
  #         path: auth/forgot-password
  #         method: post
  #         cors: true

  # confirmForgotPassword:
  #   handler: src/handlers/auth/confirmForgotPassword.handler
  #   events:
  #     - http:
  #         path: auth/confirm-forgot-password
  #         method: post
  #         cors: true

  logout:
    handler: src/handlers/auth/logout.handler
    events:
      - http:
          path: auth/logout
          method: post
          cors:
            origins:
              - http://localhost:3002
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn

  # associateMFA:
  #   handler: src/handlers/user/associateMFA.handler
  #   events:
  #     - http:
  #         path: user/associate-mfa
  #         method: post
  #         cors: true
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn

  # validateMFA:
  #   handler: src/handlers/user/validateMFA.handler
  #   events:
  #     - http:
  #         path: user/validate-mfa
  #         method: post
  #         cors: true
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn

  # changePassword:
  #   handler: src/handlers/user/changePassword.handler
  #   events:
  #     - http:
  #         path: user/change-password
  #         method: post
  #         cors: true
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn

  updateProfile:
    handler: src/handlers/user/updateProfile.handler
    events:
      - http:
          path: user/profile
          method: put
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn

  getProfile:
    handler: src/handlers/user/getProfile.handler
    events:
      - http:
          path: user/profile
          method: get
          cors:
            origins:
              - http://localhost:3002
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn

  confirmUserSignUp:
    handler: src/handlers/auth/confirmUserSignUp.handler
    events:
      - http:
          path: auth/confirm-signup
          method: post
          cors:
            origins:
              - http://localhost:3002

  # resendConfirmationCode:
  #   handler: src/handlers/auth/resendConfirmationCode.handler
  #   events:
  #     - http:
  #         path: auth/resend-code
  #         method: post
  #         cors:
  #           origins:
  #             - http://localhost:3002

  # respondToAuthChallenge:
  #   handler: src/handlers/auth/respondToAuthChallenge.handler
  #   events:
  #     - http:
  #         path: auth/auth-challenge
  #         method: post
  #         cors: true

  # get-account-by-id:
  #   handler: src/handlers/account/index.getAccountHandler
  #   events:
  #     - http:
  #         path: /account/{id}
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # get-accounts:
  #   handler: src/handlers/account/index.getAccountsHandler
  #   events:
  #     - http:
  #         path: /account
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # create-account:
  #   handler: src/handlers/account/index.createAccountHandler
  #   events:
  #     - http:
  #         path: /account
  #         method: post
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # update-account:
  #   handler: src/handlers/account/index.updateAccountHandler
  #   events:
  #     - http:
  #         path: /account/{id}
  #         method: put
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # delete-account:
  #   handler: src/handlers/account/index.deleteAccountHandler
  #   events:
  #     - http:
  #         path: /account/{id}
  #         method: delete
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # get-transfer-by-id:
  #   handler: src/handlers/transfer/index.getTransferHandler
  #   events:
  #     - http:
  #         path: /transfer/{id}
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # get-transfers:
  #   handler: src/handlers/transfer/index.getTransfersHandler
  #   events:
  #     - http:
  #         path: /transfer
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # create-transfer:
  #   handler: src/handlers/transfer/index.createTransferHandler
  #   events:
  #     - http:
  #         path: /transfer
  #         method: post
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # update-transfer:
  #   handler: src/handlers/transfer/index.updateTransferHandler
  #   events:
  #     - http:
  #         path: /transfer/{id}
  #         method: put
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # delete-transfer:
  #   handler: src/handlers/transfer/index.deleteTransferHandler
  #   events:
  #     - http:
  #         path: /transfer/{id}
  #         method: delete
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # get-transaction-by-id:
  #   handler: src/handlers/transaction/index.getTransactionHandler
  #   events:
  #     - http:
  #         path: /transaction/{id}
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # get-transactions:
  #   handler: src/handlers/transaction/index.getTransactionsHandler
  #   events:
  #     - http:
  #         path: /transaction
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # create-transaction:
  #   handler: src/handlers/transaction/index.createTransactionHandler
  #   events:
  #     - http:
  #         path: /transaction
  #         method: post
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # update-transaction:
  #   handler: src/handlers/transaction/index.updateTransactionHandler
  #   events:
  #     - http:
  #         path: /transaction/{id}
  #         method: put
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # delete-transaction:
  #   handler: src/handlers/transaction/index.deleteTransactionHandler
  #   events:
  #     - http:
  #         path: /transaction/{id}
  #         method: delete
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # get-goal-by-id:
  #   handler: src/handlers/goal/index.getSavingGoalHandler
  #   events:
  #     - http:
  #         path: /goal/{id}
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # get-goals:
  #   handler: src/handlers/goal/index.getSavingsGoalHandler
  #   events:
  #     - http:
  #         path: /goal
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # create-goal:
  #   handler: src/handlers/goal/index.createSavingGoalHandler
  #   events:
  #     - http:
  #         path: /goal
  #         method: post
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # update-goal:
  #   handler: src/handlers/goal/index.updateSavingGoalHandler
  #   events:
  #     - http:
  #         path: /goal/{id}
  #         method: put
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # delete-goal:
  #   handler: src/handlers/goal/index.deleteSavingGoalHandler
  #   events:
  #     - http:
  #         path: /goal/{id}
  #         method: delete
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # get-category-by-id:
  #   handler: src/handlers/category/index.getCategoryHandler
  #   events:
  #     - http:
  #         path: /category/{id}
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # get-categories:
  #   handler: src/handlers/category/index.getCategoriesHandler
  #   events:
  #     - http:
  #         path: /category
  #         method: get
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # create-category:
  #   handler: src/handlers/category/index.createCategoryHandler
  #   events:
  #     - http:
  #         path: /category
  #         method: post
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # update-category:
  #   handler: src/handlers/category/index.updateCategoryHandler
  #   events:
  #     - http:
  #         path: /category/{id}
  #         method: put
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # delete-category:
  #   handler: src/handlers/category/index.deleteCategoryHandler
  #   events:
  #     - http:
  #         path: /category/{id}
  #         method: delete
  #         authorizer:
  #           name: PrivateAuthorizer
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - UserPool
  #               - Arn
  #           claims:
  #             - email
  #             - sub

  # transactionsDynamoStream:
  #   handler: src/handlers/streams/transactions.handler
  #   name: ${self:service}-transactions-${opt:stage, self:provider.stage, "dev"}-stream
  #   events:
  #     - stream:
  #         type: dynamodb
  #         arn: !GetAtt TransactionTable.StreamArn
  #         batchSize: 1
  #         startingPosition: LATEST
  #         enabled: true

  # transfersDynamoStream:
  #   handler: src/handlers/streams/transfers.handler
  #   name: ${self:service}-transfers-${opt:stage, self:provider.stage, "dev"}-stream
  #   events:
  #     - stream:
  #         type: dynamodb
  #         arn: !GetAtt TransferTable.StreamArn
  #         batchSize: 1
  #         startingPosition: LATEST
  #         enabled: true
  # environment:
  #   TARGET_S3_BUCKET: ${self:provider.environment.TARGET_S3_BUCKET}

resources:
  - ${file(./sls/${self:provider.stage}/resources/main.yml)}

custom:
  # TableName: !GetAtt ProductsTable.TableName
  webpack:
    packager: 'yarn'
    keepOutputDirectory: true
    webpackConfig: 'webpack.config.js'
